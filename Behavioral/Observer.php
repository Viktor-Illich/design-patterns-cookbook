<?php

namespace DesignPatterns\Behavioral;

use SplObserver;
use SplSubject;

/**
 * PHP has several built-in interfaces \SplSubject, \SplObserver which help us
 * to build implementations of the Observer.
 * Trait encapsulates an implementation of basic \SplSubject methods
 */
trait Observable
{
    /**
     * List of observers
     * Tip: you also can use \SplObjectStorage instead of simple array
     * @var SplObserver[]
     */
    private $observers = [];

    /**
     * Attach an observer
     * @param SplObserver $observer
     */
    public function attach(SplObserver $observer)
    {
        $this->observers[] = $observer;
    }

    /**
     * Detach an observer
     * @param SplObserver $observer
     */
    public function detach(SplObserver $observer)
    {
        foreach ($this->observers as $key => $obs) {
            if ($obs === $observer) {
                unset($this->observers[$key]);
            }
        }
    }

    /**
     * Notify an observer
     */
    public function notify()
    {
        foreach ($this->observers as $observer) {
            $observer->update($this);
        }
    }
}

/**
 * Shopping cart owns some important state and notifies observers when the state changes.
 */
class Cart implements \SplSubject
{
    use Observable;

    /**
     * Some business logic state
     * @var int
     */
    protected $balance = 0;

    // Business logic

    /**
     * Changes state and notifies all subscribers about it
     * @param int $balance
     */
    public function setBalance(int $balance)
    {
        if ($this->balance !== $balance) {
            $this->balance = $balance;
            $this->notify();
        }
    }

    /**
     * Return current state
     */
    public function getBalance()
    {
        return $this->balance;
    }
}

/**
 * Concrete observers react to the updates generated by the subject they had been attached to
 */
class LoggingListener implements SplObserver
{
    /**
     * Receive update from subject
     * @param SplSubject $subject
     */
    public function update(SplSubject $subject)
    {
        if (!$subject instanceof Cart) {
            return;
        }

        echo 'Notification: balance of the shopping cart was changed to ' . $subject->getBalance() . PHP_EOL;
    }
}

# Client code example
$cart = new Cart();
$cart->attach(new LoggingListener());

$cart->setBalance(10);

/* Output:
Notification: balance of the shopping cart was changed to 10 */